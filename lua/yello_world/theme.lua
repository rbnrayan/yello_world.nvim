local c = require('yello_world.palette')

local hl = vim.api.nvim_set_hl
local theme = {}

theme.set_highlights = function ()
  hl(0, "Cursor", { fg = c.bg, bg = c.yellow })
  hl(0, "lCursor", { fg = c.bg, bg = c.yellow })
  hl(0, "CursorIM", { fg = c.bg, bg = c.yellow })
  hl(0, "CursorColumn", { fg = c.fg, bg = c.bg_alt })
  hl(0, "CursorLine", { bg = c.bg_alt })
  hl(0, "Directory", { fg = c.fg, bg = c.bg })
  hl(0, "DiffAdd", { fg = c.green, bg = c.bg })
  hl(0, "DiffChange", { fg = c.warning, bg = c.bg })
  hl(0, "DiffDelete", { fg = c.error, bg = c.bg })
  hl(0, "DiffText", { fg = c.green, bg = c.bg })
  hl(0, "EndOfBuffer", { fg = c.gray, bg = c.bg })
  hl(0, "TermCursor", { fg = c.bg, bg = c.yellow })
  hl(0, "TermCursorNC", { fg = c.bg, bg = c.bg_alt })
  hl(0, "ErrorMsg", { fg = c.error })
  hl(0, "WinSeparator", { fg = c.gray, bg = c.bg })
  hl(0, "Folded", { fg = c.green })
  hl(0, "SignColumn", { bg = c.bg })
  hl(0, "IncSearch", { fg = c.bg, bg = c.yellow })
  hl(0, "Substitute", { fg = c.bg, bg = c.yellow })
  hl(0, "LineNr", { fg = c.fg })
  hl(0, "LineNrAbove", { fg = c.gray })
  hl(0, "LineNrBelow", { fg = c.gray })
  hl(0, "CursorLineNr", { bg = c.bg_alt })
  hl(0, "CursorLineSign", { bg = c.bg })
  hl(0, "MatchParen", { fg = c.yellow })
  hl(0, "ModeMsg", { fg = c.fg, bg = c.bg })
  hl(0, "MsgArea", { fg = c.fg, bg = c.bg })
  hl(0, "MsgSeparator", { fg = c.white, bg = c.bg })
  hl(0, "MoreMsg", { fg = c.fg, bg = c.bg })
  hl(0, "NonText", { fg = c.fg, bg = c.bg })
  hl(0, "Normal", { fg = c.fg, bg = c.bg })
  hl(0, "NormalFloat", { link = 'Normal' })
  hl(0, "NormalNC", { link = 'Normal' })
  hl(0, "Pmenu", { fg = c.bg, bg = c.white })
  hl(0, "PmenuSel", { fg = c.bg, bg = c.yellow })
  hl(0, "PmenuSbar", { bg = c.bg_alt })
  hl(0, "PmenuThumb", { bg = c.white })
  hl(0, "Question", { fg = c.warning })
  hl(0, "Search", { fg = c.bg, bg = c.yellow })
  hl(0, "SpecialKey", { fg = c.gray, bg = c.bg })
  hl(0, "SpellBad", { fg = c.error, bg = c.bg, undercurl = true })
  hl(0, "SpellCap", { fg = c.warning, bg = c.bg, undercurl = true })
  hl(0, "SpellLocal", { fg = c.warning, bg = c.bg, undercurl = true })
  hl(0, "SpellRare", { fg = c.warning, bg = c.bg, undercurl = true })
  hl(0, "StatusLine", { fg = c.fg, bg = c.bg })
  hl(0, "StatusLineNC", { fg = c.gray, bg = c.bg })
  hl(0, "Tabline", { bg = c.bg })
  hl(0, "TablineFill", { bg = c.bg })
  hl(0, "TablineSel", { fg = c.fg, bg = c.bg })
  hl(0, "Title", { fg = c.yellow })
  hl(0, "Visual", { bg = c.bg_alt })
  hl(0, "VisualNOS", { bg = c.bg_alt })
  hl(0, "WarningMsg", { fg = c.warning })
  hl(0, "Whitespace", { fg = c.gray })
  hl(0, "WildMenu", { fg = c.bg, bg = c.yellow })
  hl(0, "Error", { fg = c.error })
  hl(0, "Todo", { fg = c.yellow })
  hl(0, "RedrawDebugClear", { fg = c.fg, bg = c.yellow })
  hl(0, "RedrawDebugComposed", { fg = c.fg, bg = c.green })
  hl(0, "RedrawDebugRecomposed", { fg = c.fg, bg = c.error })

  hl(0, "DiagnosticError", { fg = c.error })
  hl(0, "DiagnosticWarn", { fg = c.warning })
  hl(0, "DiagnosticInfo", { fg = c.white })
  hl(0, "DiagnosticHint", { fg = c.green })
  hl(0, "DiagnosticUnderlineError", { sp = c.error, undercurl = true })
  hl(0, "DiagnosticUnderlineWarn", { sp = c.warning, undercurl = true })
  hl(0, "DiagnosticUnderlineInfo", { sp = c.white, undercurl = true })
  hl(0, "DiagnosticUnderlineHint", { sp = c.green, undercurl = true })
  hl(0, "DiagnosticUnderlineVirtualTextError", { sp = c.error, undercurl = true })
  hl(0, "DiagnosticUnderlineVirtualTextWarn", { sp = c.warning, undercurl = true })
  hl(0, "DiagnosticUnderlineVirtualTextInfo", { sp = c.white, undercurl = true })
  hl(0, "DiagnosticUnderlineVirtualTextHint", { sp = c.green, undercurl = true })
  hl(0, "DiagnosticFloatingError", { link = 'DiagnosticError' })
  hl(0, "DiagnosticFloatingWarn", { link = 'DiagnosticWarn' })
  hl(0, "DiagnosticFloatingInfo", { link = 'DiagnosticInfo' })
  hl(0, "DiagnosticFloatingHint", { link = 'DiagnosticHint' })
  hl(0, "DiagnosticSignError", { link = 'DiagnosticError' })
  hl(0, "DiagnosticSignWarn", { link = 'DiagnosticWarn' })
  hl(0, "DiagnosticSignInfo", { link = 'DiagnosticInfo' })
  hl(0, "DiagnosticSignHint", { link = 'DiagnosticHint' })

  hl(0, "NvimInternalError", { fg = c.fg, bg = c.error, undercurl = true })

  hl(0, "NvimTreeWindowPicker", { fg = c.fg, bg = c.yellow })
  hl(0, "NvimTreeIndentMarker", { fg = c.fg })
  hl(0, "NvimTreeFolderIcon", { fg = c.fg })

  hl(0, "CmpItemAbbr", { fg = c.fg })
  hl(0, "CmpItemAbbrMatch", { fg = c.white, bold = true })
  hl(0, "CmpItemAbbrDeprecated", { fg = c.gray, strikethrough = true })
  hl(0, "CmpItemMenu", { fg = c.green })
  hl(0, "CmpItemMatchFuzzy", { fg = c.white })

  hl(0, "Constant", { fg = c.green })
  hl(0, "Identifier", { fg = c.fg })
  hl(0, "Statement", { fg = c.yellow })
  hl(0, "PreProc", { fg = c.yellow })
  hl(0, "Type", { fg = c.yellow })
  hl(0, "Special", { fg = c.fg })
  hl(0, "Comment", { fg = c.gray })

  hl(0, "StorageClass", { fg = c.yellow })

  hl(0, "TSStorageClass", { fg = c.yellow })
  hl(0, "TSNamespace", { fg = c.fg })
  hl(0, "TSTypeDefenition", { fg = c.fg })
  hl(0, "TSConstant", { fg = c.fg })
  hl(0, "TSTypeQualifier", { fg = c.fg })
  hl(0, "TSTitle", { fg = c.fg })
  hl(0, "TSFuncMacro", { fg = c.fg })
  hl(0, "TSType", { fg = c.fg })

  hl(0, "rustModPath", { fg = c.fg })
  hl(0, "rustAssert", { fg = c.fg })
  hl(0, "rustType", { fg = c.fg })
  hl(0, "rustIndetifier", { fg = c.fg })
  hl(0, "rustSelf", { fg = c.fg, bold = true })

  hl(0, "typescriptIdentifier", { fg = c.fg, bold = true })
  hl(0, "typescriptOperator", { fg = c.yellow })
  hl(0, "typescriptVariable", { fg = c.yellow })
  hl(0, "typescriptDOMFormProp", { fg = c.fg })
  hl(0, "typescriptPaymentShippingOptionProp", { fg = c.fg })
  hl(0, "typescriptCall", { fg = c.fg })

  hl(0, "javaScriptIdentifier", { bold = true })

  hl(0, "cType", { fg = c.yellow })
  hl(0, "cTSType", { fg = c.yellow })

  hl(0, "rubyScopeOperator", { fg = c.yellow })
  hl(0, "rubySuperClassOperator", { fg = c.yellow })
end

return theme
